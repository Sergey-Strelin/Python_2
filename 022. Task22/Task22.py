# Создайте класс студент.
# Используя дескрипторы проверяйте ФИО на первую заглавную букву и наличие только букв.
# Названия предметов должны загружаться из файла CSV при создании экземпляра.
# Другие предметы в экземпляре недопустимы.
# Для каждого предмета можно хранить оценки (от 2 до 5) и результаты тестов (от 0 до 100).
# Также экземпляр должен сообщать средний балл по тестам для каждого предмета
# и по оценкам всех предметов вместе взятых.

from students.education import Student
from students.disciplines import Discipline

if __name__ == '__main__':
    """
    Модуль - демонстратор в котором:
    - создаём студентов и выводим на печать
    - добавляем оценки по предметам
    - сохраняем данные по студенту
    - удаляем одного из студентов и создаём заново, при этом результаты успеваемости 
        подгружаются из файла с оценками(имя файла должно иметь вид ФамилияИО.csv)
    ВНИМАНИЕ!!! Перед повторным запуском удалить файл ИвановНП.csv
    """

    # Создаю студентов
    student_1 = Student('Иванов', 'Николай', 'Петрович')
    student_2 = Student('Петров', 'Сергей', 'Михайлович')
    # два тестовых студента с неправильными данными
    # student_3 = Student('Сидор0в', 'Сергей', 'Михайлович')
    # student_4 = Student('сидоров', 'Василий', 'Михайлович')

    # Выводим струдентов на экран
    print(student_1)
    print(student_2)

    # Добавляю оценки по предметам
    student_1.append_to_progress(Discipline('Математика', 2, 10))
    student_1.append_to_progress(Discipline('Физика', 5, 50))
    student_1.append_to_progress(Discipline('Химия', 3, 30))
    student_2.append_to_progress(Discipline('Химия', 4, 30))
    # при добавлении Биологии выдаётся ошибка - нет такого предмета в списке
    # student_2.append_to_progress(Discipline('Биология', 3, 30))

    # Вывожу студентов в двух вариантах (короткое имя и оценки
    print(student_1.short_name)
    print(student_1.show_progress())
    print(student_2.short_name)
    print(student_2.show_progress())

    student_1.save_progress()

    # Удаляю Иванова
    del student_1

    # Создаю Иванова заново - Дисциплины должны подгрузиться из файла ИвановНП.csv
    student_1_1 = Student('Иванов', 'Николай', 'Петрович')
    print(student_1_1.short_name)
    print(student_1_1.show_progress())
